<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nitta Labo Tutorial</title>
    <link>http://localhost:55577/</link>
    <description>Recent content on Nitta Labo Tutorial</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:55577/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Figma</title>
      <link>http://localhost:55577/post/figma/</link>
      <pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:55577/post/figma/</guid>
      <description>&lt;p&gt;📚 &lt;a href=&#34;https://www.figma.com/login&#34;&gt;Sign in figma&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 チームで行うときは、複数人で作業もできる&lt;br&gt;&#xA;🌷 チームで行うときにこの画面を見返すことによってどんなレイアウトだったか一目で確認することができる&lt;/p&gt;&#xA;&lt;p&gt;🌷これを今から作ります！所要時間　約〇分&#xA;&lt;img src=&#34;http://localhost:55577/images/figma16.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 Draft（下書き）を押して、+Create new を押す&#xA;&lt;img src=&#34;http://localhost:55577/images/figma1.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 格子マークを押すと、Frameの種類が出てくる&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/figma9.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 一番上の Android Compact が Android 端末に一番近いサイズなので、選択する。&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/figma10.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 ctrl+D で以下のように複製し、今回は3つ作る&#xA;&lt;img src=&#34;http://localhost:55577/images/figma2.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 Tのマークはテキストを配置してくれるので、選択し、画像のように適した位置を選択する&#xA;&lt;img src=&#34;http://localhost:55577/images/figma3.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 以下の位置で文字のサイズを調節できる&lt;br&gt;&#xA;（⭐ctrl+zで戻れるので（idやpassなど）続きを付け足してみよう！）&#xA;&lt;img src=&#34;http://localhost:55577/images/figma4.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 Layersには先程配置した３つの素材があるので、それぞれ右クリック→ RenameでSignUp, MyAccount, AccountFolder に名前を変更する。&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/figma5.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 Assetsにはテンプレがあるので、似たようなものを選択できる（今回は Contact Us を選択）&#xA;&lt;img src=&#34;http://localhost:55577/images/figma6.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 素材からのドラック＆ドロップを繰り返すと以下のようなものが作れる&lt;br&gt;&#xA;🌷素材は使い終わったら、素材を選択してBackSpace押すと消せる&lt;br&gt;&#xA;🌷画像と完璧に同じでなくていい&lt;br&gt;&#xA;（このデザインはあくまでコードを書いていく上での下書きのようなものだから）&#xA;&lt;img src=&#34;http://localhost:55577/images/figma7.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷以下のように作れる。次に右上のプロトタイプを押し、&#xA;&lt;img src=&#34;http://localhost:55577/images/figma16.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷ボタンから飛んでほしい画面に繋げる&#xA;&lt;img src=&#34;http://localhost:55577/images/figma12.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷On tap は「クリックしたとき」なのでこのままでいい。  同様に、ListボタンからAccountListにも繋げる。&#xA;&lt;img src=&#34;http://localhost:55577/images/figma13.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷▷を押すと、シミュレーションできる&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/figma17.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷終わり♪&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swagger</title>
      <link>http://localhost:55577/post/swagger/</link>
      <pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:55577/post/swagger/</guid>
      <description>&lt;p&gt;コードを書く前に、何のデータをどんな形で送るのか、アカウントがなかったらどのようなエラーを出すか（404？401？)を決めてここに記し、コードを書くときにはSwaggerを見ながら書きます。&lt;/p&gt;&#xA;&lt;p&gt;📚 &lt;a href=&#34;https://techblog.asahi-net.co.jp/entry/2019/03/04/102734&#34;&gt;参考サイト&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://editor.swagger.io/&#34;&gt;swagger editor&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下は、Swagger editor (左) と Swagger UI (右) です&lt;br&gt;&#xA;これを書いていきます（DELETE以外）&#xA;Try our new Editorを押して、左のコードを全部消し、下の画像や次の説明をコピペしながら、UIと比べて理解していきましょう&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/swagger6.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;右のSwagger UIと照らして見ていくと、、&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/info.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;openapi&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0.3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;info&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Citrus - OpenAPI 3.0  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0.0&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: |-&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    bookチーム-分担1とか  &lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🌷 FileタブのSave as YAML を押すと左のコードをyaml形式で保存できるため、このコードをチームで共有できます。&lt;br&gt;&#xA;🌷 他のチームのコードを開くときは、FileタブのImport fileを押し、保存したファイルを開くと閲覧や編集ができる。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/tags.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;accounts&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;全アカウントの情報 &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 詳しい説明を書きましょう&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🌷タグの名前をaccountsとします📖&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/required.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;components&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# {account_id}のようなものがパスパラメータ&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;account_id&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;path&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;account_id&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;取得対象のユーザーID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;schema&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 必須という意味&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🌷{account_id}は後で何回も出てくるので、これパスパラメーターだよーとか、取得対象のユーザーidなんだよーとか、必須項目だよとかここに先に書いておきます。&lt;br&gt;&#xA;🌷後で「- $ref: &amp;ldquo;#/components/parameters/account_id&amp;rdquo;」と書いたら、{account_id}を使えます。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/swagger1.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;/accounts&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;get&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# accountsタグの中のお話📖  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;accounts&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;summary&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;アカウントの一覧を返す &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 説明を書きましょう。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;アカウントの一覧をリストとして返す &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 詳しい説明を書きましょう&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;responses&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;200&amp;#39;&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# 成功&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;成功&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;content&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;application/json&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# JSON形式で返す&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;schema&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;array &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 配列&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;items&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;string &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 文字列&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;example&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;id1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🌷/accountsというパスに対してGETをすると、成功だった場合（200)、アカウントの一覧をリストとしてJSON形式で返すことが書かれています。&lt;br&gt;&#xA;🌷schemaには返すデータの例がString（文字列）とarray（配列）を用いて表現されています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intellij</title>
      <link>http://localhost:55577/post/intellij_idea/</link>
      <pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:55577/post/intellij_idea/</guid>
      <description>&lt;p&gt;🌷 以下は19thのシトラスプロジェクトです🍊&lt;br&gt;&#xA;🌷 このように、プロジェクトでは entites, repositories, resources という3つのPakageを作り、その中に &#x9;javaファイルを作っていきます&lt;br&gt;&#xA;🌷 他のプロジェクトが開いた状態になっている人は、左上の4本線をクリックし、fileからclose projectを押します。&#xA;&lt;img src=&#34;http://localhost:55577/images/in.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 以下の画面になると、まずはNewProjectを押します&#xA;&lt;img src=&#34;http://localhost:55577/images/in0.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 左のSpring Bootを選択し、JDKは21以上にします。&lt;br&gt;&#xA;🌷 Nameは好きな名前にに設定します&lt;br&gt;&#xA;🌷 私はLessonServerと設定しました。Nextを押し、&#xA;&lt;img src=&#34;http://localhost:55577/images/in1.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 Jerseyを選択し、Createを押します&#xA;&lt;img src=&#34;http://localhost:55577/images/in2.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 LessonServer を右クリックし、その下に entitesと、resourcesという名前の Pakage を作ります&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/in4.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 entitiesの中には、Account.javaを作ります（画像ではrepositoriesパッケージが作られてしまっていますが無視してください）&#xA;&lt;img src=&#34;http://localhost:55577/images/in5.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷Accountと入力します&#xA;&lt;img src=&#34;http://localhost:55577/images/in6.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 resorcesの中には、AccountsRest.javaを作ります &lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/in7.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;🌷 Account.javaには以下をコピペしてください&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.example.LessonServer.entities;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Account.java&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.example.LessonServer.entities;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Account&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String account_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String password;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Account&lt;/span&gt;(String aid, String pass) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        account_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pass;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getAccount_id&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; account_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setAccount_id&lt;/span&gt;(String account_id) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;account_id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; account_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setPassword&lt;/span&gt;(String p) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getPassword&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; password;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🌷 AccountRest.javaには以下をコピペしてください&lt;/p&gt;</description>
    </item>
    <item>
      <title>Postman</title>
      <link>http://localhost:55577/post/postman/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:55577/post/postman/</guid>
      <description>&lt;p&gt;端末に情報を入力したときに、何が返ってきているのかを可視化するためのツール&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.postman.com/downloads/&#34;&gt;PostMan&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;どうにかして新規登録をすると、下の画面が出てきます&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/postman1.png&#34; alt=&#34;images&#34;&gt;&#xA;&lt;em&gt;↑&lt;span style=&#34;color:deeppink&#34;&gt;〇を押します&lt;/span&gt;&lt;/em&gt;&lt;br&gt;&#xA;.&lt;br&gt;&#xA;.&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/postman2.png&#34; alt=&#34;images&#34;&gt;&#xA;&lt;em&gt;↑&lt;span style=&#34;color:deeppink&#34;&gt;□を押すと、&lt;/span&gt;&lt;/em&gt;&lt;br&gt;&#xA;.&lt;br&gt;&#xA;.&lt;br&gt;&#xA;↓&lt;span style=&#34;color:purple&#34;&gt;GET POST PUT DELが出てきます&lt;/span&gt;&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/postman3.png&#34; alt=&#34;images&#34;&gt;&#xA;&lt;em&gt;↑&lt;span style=&#34;color:deeppink&#34;&gt;POSTを押す&lt;/span&gt;&lt;/em&gt;&lt;br&gt;&#xA;.&lt;br&gt;&#xA;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;post&#34;&gt;Post&lt;/h2&gt;&#xA;&lt;p&gt;↓&lt;span style=&#34;color:deeppink&#34;&gt;Bodyを選択&lt;/span&gt; &lt;br&gt;&#xA;↓&lt;span style=&#34;color:deeppink&#34;&gt;x-www-form-urlencodedを選択&lt;/span&gt; &lt;br&gt;&#xA;↓&lt;span style=&#34;color:deeppink&#34;&gt;アカウントとパスワード&lt;/span&gt; の &lt;span style=&#34;color:purple&#34;&gt;KeyとValueを入力するための欄が出てきます&lt;/span&gt;&lt;br&gt;&#xA;↓&lt;span style=&#34;color:purple&#34;&gt;Key&lt;/span&gt; に &lt;span style=&#34;color:green&#34;&gt;account_id ,  password&lt;/span&gt;と&lt;span style=&#34;color:deeppink&#34;&gt;入力&lt;/span&gt;&lt;br&gt;&#xA;↓&lt;span style=&#34;color:purple&#34;&gt;Value&lt;/span&gt; に 自分のつけたいアカウント名とパスワードを&lt;span style=&#34;color:deeppink&#34;&gt;入力&lt;/span&gt;&lt;br&gt;&#xA;（これがフォームデータとして &lt;span style=&#34;color:deeppink&#34;&gt;x-www-form-urlencoded&lt;/span&gt; 形式で送信される&lt;br&gt;&#xA;&lt;strong&gt;Intellij起動&lt;/strong&gt;して、&lt;br&gt;&#xA;↓&lt;span style=&#34;color:deeppink&#34;&gt;Sendを押すと&lt;/span&gt;&#xA;↓&lt;span style=&#34;color:purple&#34;&gt;tokenが出てきます&lt;/span&gt;&lt;br&gt;&#xA;・tokenは登録したアカウント情報をGETするときや、アカウントをDELETEするときに利用する。&lt;br&gt;&#xA;・2回目にpostしたときは、「（入力したアカウントid）は既に存在します」と表示され、tokenは表示されないから、一回目にtokenはコピペしとく&lt;br&gt;&#xA;&lt;strong&gt;&lt;span style=&#34;color:yellowgreen&#34;&gt;localhost:8080&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;&#xA;・&lt;strong&gt;localhost&lt;/strong&gt;はコンピュータ自信を指す特別なホスト名&lt;br&gt;&#xA;・IPアドレスに置き換えると127.0.0.1と同じ&lt;br&gt;&#xA;・&lt;strong&gt;8080&lt;/strong&gt;はポート番号&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/postman6.png&#34; alt=&#34;images&#34;&gt;&#xA;&lt;strong&gt;AccountRest.java&lt;/strong&gt;&lt;br&gt;&#xA;POSTは、@Consumesがいる&#xA;&lt;img src=&#34;http://localhost:55577/images/post1.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;get&#34;&gt;GET&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color:yellowgreen&#34;&gt;{ここに&lt;/span&gt;&lt;span style=&#34;color:green&#34;&gt;accountId&lt;/span&gt;&lt;span style=&#34;color:yellowgreen&#34;&gt;入れる}。&lt;/span&gt;&lt;br&gt;&#xA;下は&lt;span style=&#34;color:deeppink&#34;&gt;token&lt;/span&gt;だけ&#xA;&lt;img src=&#34;http://localhost:55577/images/postman7.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;&lt;em&gt;今はまだ何も情報を入れていないから、返ってくる&lt;span style=&#34;color:purple&#34;&gt;introduction は null&lt;/span&gt; になっている&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AccountRest.java&lt;/strong&gt;&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/get1.png&#34; alt=&#34;images&#34;&gt;&#xA;AccountManager.java&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/amga.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;&lt;em&gt;②作ったHashMap（accounts）に、アカウントIDを与えてaccounts.get(accountId)と書くことでそのアカウント情報を取ってくれる&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/amhm.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;&lt;em&gt;①アカウントIDとそれに対応するアカウント情報（Account）がまとまったHashMapを作成し、accountsに代入&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Account.java&lt;/strong&gt;&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/aj.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以上でPostmanは終わり🎉&lt;/p&gt;&#xA;&lt;p&gt;次はAndroidStudioでフロントエンドを書いていくよ！&lt;/p&gt;</description>
    </item>
    <item>
      <title>AndroidStudio</title>
      <link>http://localhost:55577/post/android_studio/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:55577/post/android_studio/</guid>
      <description>&lt;p&gt;手順を説明します🐘&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 NewProjectを押します&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app1.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Empty Views Activity を押します&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app2.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Nameにタイトルを入力&lt;br&gt;&#xA;🌷 Build configuration languageをKotlinにする&lt;br&gt;&#xA;🌷 Minimum SDKを API30 にする&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app3.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 左上がProjectとなっていますが、準備中なので、「Android」と表示されるまで待ちます&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app4.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 今、右で表示されている MainActivity.java のファイルの位置を確認します&lt;br&gt;&#xA;🌷 ＞をクリックしていきます&#xA;&lt;img src=&#34;http://localhost:55577/images/app5.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Androidでは画面のことをActivityといいます&lt;br&gt;&#xA;🌷 １つの画面ごとに [画面名]Activity.java と、 activity_[画面名].xml の2つを作ります&lt;br&gt;&#xA;🌷 プロジェクトツールウィンドウ（左の部分）を見ると、app/java/com/example/lessonに MainActivity.java があることが分かります。&lt;br&gt;&#xA;🌷 次に、activity_main.xml を押しましょう&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55577/images/app6.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷このxmlでは、一つの画面のレイアウトをいじります。（後で戻ってくるので理解はざっくりでok）&#xA;&lt;img src=&#34;http://localhost:55577/images/app7.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 プロジェクト全体をコンパイルすることをビルドといいます&lt;br&gt;&#xA;（コンパイルとは、コードを機械言語に変換することだが、javaの場合はコードと機械言語の中間に値する中間言語に変換する）&lt;br&gt;&#xA;🌷 🐘build.gradle.ktsにはビルドの設定と、使用するライブラリが書かれています。&lt;br&gt;&#xA;🌷 今回は通信をするためにretrofit2というライブラリを使うので、これから設定していきます。&lt;br&gt;&#xA;🌷 それでは、build.gradle.kts をあけます。&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app8.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 retrofitをダウンロードできるように以下を追加します。&lt;br&gt;&#xA;🌷 エラーが出ますが、右上の 🐘を押すとビルドされ、エラーは消えます。&#xA;&lt;img src=&#34;http://localhost:55577/images/app55.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次に MainActivity の名前を SignUpActivity に変えます。&lt;br&gt;&#xA;🌷 figmaでは３つの画面を作りましたね&lt;br&gt;&#xA;🌷 後ほど、SettingsActivity.java や AccountListActivity.java も作成します。&#xA;&lt;img src=&#34;http://localhost:55577/images/app56.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷  MainActivityを右クリックして、Refactorを押し、Renameを押します。&#xA;&lt;img src=&#34;http://localhost:55577/images/app11.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 すると以下の画面が出てくるので、figmaに設定したのと同じ名前（にしたら分かりやすい）に変更します。&lt;br&gt;&#xA;～単語の先頭は大文字にするのが一般的～&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app12.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 同じように、レイアウトの名前も分かりやすいように変えます。&#xA;&lt;img src=&#34;http://localhost:55577/images/app13.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷mainの部分をsign_upなどと分かりやすいように変えます。&lt;br&gt;&#xA;～単語の先頭は小文字にし、大文字の前に_を入れるのが一般的（画像は_が入ってないけど無視してください）～&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app14.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次に、com/example/lessonの下にPakageをviews,models,restの3つ作ります。&lt;br&gt;&#xA;🌷 理由は、後でファイルを探すときに困るので、整理するために作っておきます。&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app15.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 まず、viewsパッケージを作ります。&#xA;&lt;img src=&#34;http://localhost:55577/images/app16.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷viewsというPackageにSignUpActivityをドラック＆ドロップする。（viewの中に入れる）&#xA;&lt;img src=&#34;http://localhost:55577/images/app17.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Refactorを押す&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app18.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次にviewsと同じ階層にmodelsパッケージを作りたいです。&lt;br&gt;&#xA;🌷 com.example.lesson.viewsとあるが、お構いなしに右クリックを押す。&#xA;&lt;img src=&#34;http://localhost:55577/images/app20.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 com.example.lesson.viewsの、viewsを消して、modelsと書き換えることで、同じ階層にPackageが作られます。&#xA;&lt;img src=&#34;http://localhost:55577/images/app21.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 modelパッケージの中にはAccount.javaを作ります。&#xA;&lt;img src=&#34;http://localhost:55577/images/app23.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Accountと入力&#xA;&lt;img src=&#34;http://localhost:55577/images/app24.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Account.javaには、Intellijに書かれたAccount.javaのコードをそのまま貼り付ける&lt;br&gt;&#xA;🌷 ↓はIntelij&#xA;&lt;img src=&#34;http://localhost:55577/images/app80.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次にviewsやmodelsと同じ階層にrestパッケージを作りたいです。&lt;br&gt;&#xA;🌷 com.example.lessonを右クリックする。&#xA;&lt;img src=&#34;http://localhost:55577/images/app25.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 restと入力&#xA;&lt;img src=&#34;http://localhost:55577/images/app26.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 restパッケージの中にはAccountRest.javaを作る&#xA;&lt;img src=&#34;http://localhost:55577/images/app27.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 AccountRestと入力し、Interfaceを選択する&#xA;&lt;img src=&#34;http://localhost:55577/images/app28.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 作られました(o^―^o)ﾆｺ&#xA;&lt;img src=&#34;http://localhost:55577/images/app29.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 ここでは、IntellijのAccountRestと対応するように書いていく&lt;br&gt;&#xA;🌷 IntelijではFormParamと書かれているがAndroidStudioではFieldと書く&#xA;&lt;img src=&#34;http://localhost:55577/images/app85.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 activity.sign_up_xmlで画面が小さいなぁって思ったら、ctrl押しながらカーソルころころすると、&#xA;&lt;img src=&#34;http://localhost:55577/images/app30.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 アップできます(o^―^o)ﾆｺ&#xA;&lt;img src=&#34;http://localhost:55577/images/app31.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 左側のButtonやTextBoxを引っ張ってきて配置できるので、&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app32.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 figma参考にしながらこのような画面を作る&#xA;&lt;img src=&#34;http://localhost:55577/images/app33.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Buttonを選択しているとき、右のtextでRegisterと打ち、Enterを押すと、&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app34.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 ボタンにはRegisterと表示される&lt;br&gt;&#xA;🌷 右のidにはRegisterbuttonなどと入力しておく。（後で使う）&#xA;&lt;img src=&#34;http://localhost:55577/images/app35.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次に、ボタンやテキストは、選択したときに出てくる青い点を縦横右左に引っ張って、端にくっつける&#xA;&lt;img src=&#34;http://localhost:55577/images/app36.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 くっつけた状態で配置したい位置に配置する&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app37.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 テキストボックスも同じようにtextをSignUpに変え、idもSignUpなどとし、Refactorを押す&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app38.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 このようになっていたらOK&#xA;&lt;img src=&#34;http://localhost:55577/images/app39.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 acitvity_sign_up.xmlの、Codeの方を選ぶと、このようなコードが書かれている&lt;br&gt;&#xA;🌷 以下の部分でSignUpのテキストのことが書かれている&lt;br&gt;&#xA;🌷 以下のように android:textAlignment=&amp;ldquo;center&amp;quot;を入れると、右でも左でもなく真ん中に来てくれる&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app40.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 android:textColor=&amp;quot;#000000&amp;rdquo;  色が黒にできる&lt;br&gt;&#xA;🌷 android:textSize=&amp;ldquo;38sp&amp;rdquo;  テキストのサイズを調節できる&lt;br&gt;&#xA;🌷 android:textStyle=&amp;ldquo;bold&amp;rdquo;  文字が太くなる&#xA;&lt;img src=&#34;http://localhost:55577/images/app42.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 Designに戻るとこんな風に表示される&#xA;&lt;img src=&#34;http://localhost:55577/images/app43.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 ここはmatch_parentにする&#xA;&lt;img src=&#34;http://localhost:55577/images/app44.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次に入力画面を作りたいとき、Text の Plain Text を画面に引っ張ってくる&#xA;&lt;img src=&#34;http://localhost:55577/images/app45.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 android:hint=&amp;quot; Username&amp;quot; 薄く入力内容のヒントを書くときこのように書く&lt;br&gt;&#xA;🌷 textは消す&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app48.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 UsernameとPasswordそれぞれにidを設定し、壁に固定して、以下のようになるとOK&#xA;&lt;img src=&#34;http://localhost:55577/images/app50.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 空のテキストボックスも作る。これはエラーを表示させる場所。idも設定する&#xA;&lt;img src=&#34;http://localhost:55577/images/app53.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次に、SettingActivityを作りたい&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app33.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 SignUpActivityを選択した状態で、File → New Activity → Empty Views Activityを押す&lt;br&gt;&#xA;🌷 この作り方だと、javaファイルだけでなく、xmlファイルも同時に作ってくれる👏&#x9;　　&#xA;&lt;img src=&#34;http://localhost:55577/images/app57.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 同時にAccountsListActivityも作る&lt;br&gt;&#xA;🌷 以下のようになれば正解&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app81.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 activity_settings.xmlをfigmaを見ながら作る&#xA;&lt;img src=&#34;http://localhost:55577/images/app33.png&#34; alt=&#34;images&#34;&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 パスワード変更のボタンを忘れていたので少しレイアウトが変わりました笑&lt;br&gt;&#xA;🌷 こちらを見よう見まねで作ってみましょう&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app86.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 次に、SignUpActivityに戻り、registerボタンを押すとSettings画面に遷移するようにする&lt;br&gt;&#xA;🌷 最初はこのようになっているはずだが、少なかったら以下のようにする&#xA;&lt;img src=&#34;http://localhost:55577/images/app64.png&#34; alt=&#34;images&#34;&gt;&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;・&lt;br&gt;&#xA;🌷 以下のコードを追加する&lt;br&gt;&#xA;&lt;img src=&#34;http://localhost:55577/images/app65.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
